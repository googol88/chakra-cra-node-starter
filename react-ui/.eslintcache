[{"/Users/ronald/github/hackmcst-starter/react-ui/src/index.js":"1","/Users/ronald/github/hackmcst-starter/react-ui/src/serviceWorker.js":"2","/Users/ronald/github/hackmcst-starter/react-ui/src/App.js":"3","/Users/ronald/github/hackmcst-starter/react-ui/src/ColorModeSwitcher.js":"4","/Users/ronald/github/hackmcst-starter/react-ui/src/Logo.js":"5"},{"size":840,"mtime":1611930709534,"results":"6","hashOfConfig":"7"},{"size":5081,"mtime":1611930709536,"results":"8","hashOfConfig":"7"},{"size":3730,"mtime":1612237303169,"results":"9","hashOfConfig":"7"},{"size":617,"mtime":1611930709533,"results":"10","hashOfConfig":"7"},{"size":489,"mtime":1611930709534,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"6g9u67",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ronald/github/hackmcst-starter/react-ui/src/index.js",[],["25","26"],"/Users/ronald/github/hackmcst-starter/react-ui/src/serviceWorker.js",[],["27","28"],"/Users/ronald/github/hackmcst-starter/react-ui/src/App.js",["29"],"import React, { useCallback, useEffect, useState } from 'react';\nimport {\n  ChakraProvider,\n  Box,\n  Text,\n  Link,\n  VStack,\n  Code,\n  Grid,\n  theme,\n} from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport { Logo } from './Logo';\n\nfunction App() {\n  const [message, setMessage] = useState(null);\n  const [isFetching, setIsFetching] = useState(false);\n  const [url, setUrl] = useState('/api');\n\n  const fetchData = useCallback(() => {\n    fetch(url)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`status ${response.status}`);\n        }\n        return response.json();\n      })\n      .then(json => {\n        setMessage(json.message);\n        setIsFetching(false);\n      }).catch(e => {\n        setMessage(`API call failed: ${e}`);\n        setIsFetching(false);\n      })\n  }, [url]);\n\n  useEffect(() => {\n    setIsFetching(true);\n    fetchData();\n  }, [fetchData]);\n  \n  return (\n    <ChakraProvider theme={theme}>\n      <Box textAlign=\"center\" fontSize=\"xl\">\n        <Grid minH=\"100vh\" p={3}>\n          <ColorModeSwitcher justifySelf=\"flex-end\" />\n          <VStack spacing={8}>\n            <Logo h=\"40vmin\" pointerEvents=\"none\" />\n            { process.env.NODE_ENV === 'production' ?\n                <Text>\n                  This is a production build from create-react-app.\n                </Text>\n              : <Text>\n                  Edit <Code fontSize=\"xl\">src/App.js</Code> and save to reload.\n                </Text>\n            }\n            <Text>{'« '}\n            {isFetching\n              ? 'Fetching message from API'\n              : message}\n            {' »'}</Text>\n            <Link\n              color=\"teal.500\"\n              href={url}\n              fontSize=\"2xl\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Learn Chakra\n            </Link>\n          </VStack>\n        </Grid>\n      </Box>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n/*\nimport React, { useCallback, useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const [message, setMessage] = useState(null);\n  const [isFetching, setIsFetching] = useState(false);\n  const [url, setUrl] = useState('/api');\n\n  const fetchData = useCallback(() => {\n    fetch(url)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`status ${response.status}`);\n        }\n        return response.json();\n      })\n      .then(json => {\n        setMessage(json.message);\n        setIsFetching(false);\n      }).catch(e => {\n        setMessage(`API call failed: ${e}`);\n        setIsFetching(false);\n      })\n  }, [url]);\n\n  useEffect(() => {\n    setIsFetching(true);\n    fetchData();\n  }, [fetchData]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        { process.env.NODE_ENV === 'production' ?\n            <p>\n              This is a production build from create-react-app.\n            </p>\n          : <p>\n              Edit <code>src/App.js</code> and save to reload.\n            </p>\n        }\n        <p>{'« '}<strong>\n          {isFetching\n            ? 'Fetching message from API'\n            : message}\n        </strong>{' »'}</p>\n        <p><a\n          className=\"App-link\"\n          href=\"https://github.com/mars/heroku-cra-node\"\n        >\n          React + Node deployment on Heroku\n        </a></p>\n        <p><a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a></p>\n      </header>\n    </div>\n  );\n\n}\n\nexport default App;\n*/","/Users/ronald/github/hackmcst-starter/react-ui/src/ColorModeSwitcher.js",[],"/Users/ronald/github/hackmcst-starter/react-ui/src/Logo.js",[],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"30","replacedBy":"34"},{"ruleId":"32","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":18,"column":15,"nodeType":"38","messageId":"39","endLine":18,"endColumn":21},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],["40"],["41"],"no-unused-vars","'setUrl' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]